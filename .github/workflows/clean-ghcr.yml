name: üßπ Clean GHCR SHA256 Images

on:
  workflow_dispatch:  # ÊîØÊåÅÊâãÂä®Ëß¶Âèë
  schedule:
    - cron: '0 3 * * *'  # ÊØèÂ§© UTC 3 ÁÇπÊâßË°åÔºàÂåó‰∫¨Êó∂Èó¥ 11 ÁÇπÔºâ

permissions:
  packages: write  # ÈúÄË¶ÅÂÜôÊùÉÈôê‰ª•Âà†Èô§ÈïúÂÉè
  contents: read   # ÈúÄË¶ÅËØªÊùÉÈôê‰ª•ËÆøÈóÆ‰ªìÂ∫ì‰ø°ÊÅØ

jobs:
  clean:
    runs-on: ubuntu-latest
    steps:
      - name: üßæ Delete SHA256-named GHCR images
        env:
          GH_TOKEN: ${{ github.token }}  # ‰ΩøÁî®ÈªòËÆ§ GITHUB_TOKEN
          REPO_NAME: ${{ github.repository }}
          PACKAGE_NAME: adguard  # ÊòéÁ°ÆÊåáÂÆöÂåÖÂêç
        run: |
          # Ë∞ÉËØïÔºöËæìÂá∫ÁéØÂ¢ÉÂèòÈáè
          echo "üîç REPO_NAME: $REPO_NAME"
          echo "üîç PACKAGE_NAME: $PACKAGE_NAME"

          # Ëé∑ÂèñÊâÄÊúâÈïúÂÉèÁâàÊú¨Âπ∂Ë∞ÉËØïËæìÂá∫
          echo "üîç Fetching all package versions for $PACKAGE_NAME..."
          VERSIONS_JSON=$(gh api -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            /user/packages/container/$PACKAGE_NAME/versions \
            --paginate)

          # Ê£ÄÊü• JSON Êï∞ÊçÆÊòØÂê¶‰∏∫Á©∫
          if [ -z "$VERSIONS_JSON" ]; then
            echo "‚ùå No versions found or API request failed."
            exit 1
          fi

          # ËæìÂá∫ÂéüÂßã JSON Êï∞ÊçÆ‰ª•‰æøË∞ÉËØï
          echo "üìú Raw versions JSON:"
          echo "$VERSIONS_JSON" | jq .

          # ËøáÊª§ name Â≠óÊÆµÂåÖÂê´ sha256: ÁöÑÁâàÊú¨ IDÔºåÊåâ created_at ÂÄíÂ∫èÊéíÂ∫è
          VERSIONS=$(echo "$VERSIONS_JSON" | jq -r 'sort_by(.created_at) | reverse | .[] | select(.name | startswith("sha256:")) | .id')

          # Ê£ÄÊü•ÊòØÂê¶Êúâ SHA256 ÂêçÁß∞ÁöÑÁâàÊú¨
          if [ -z "$VERSIONS" ]; then
            echo "‚úÖ No SHA256-named versions found."
            exit 0
          fi

          # ËæìÂá∫ËøáÊª§Âá∫ÁöÑÁâàÊú¨ ID ‰ª•‰æøË∞ÉËØï
          echo "üìã Found SHA256-named version IDs:"
          echo "$VERSIONS" | while read -r vid; do echo "  - $vid"; done

          # ÈÅçÂéÜÂπ∂Âà†Èô§ÊØè‰∏™ SHA256 ÂêçÁß∞ÁöÑÁâàÊú¨ÔºåÊçïËé∑ HTTP 400 ÈîôËØØÂπ∂Ë∑≥Ëøá
          for vid in $VERSIONS; do
            echo "üóëÔ∏è Attempting to delete version ID: $vid"
            if ! gh api -X DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GH_TOKEN" \
              /user/packages/container/$PACKAGE_NAME/versions/$vid 2> error.log; then
              if grep -q "You cannot delete the last tagged version" error.log; then
                echo "‚ö†Ô∏è Skipped version ID: $vid (last tagged version)"
              else
                echo "‚ùå Failed to delete version ID: $vid (unexpected error)"
                cat error.log
              fi
            else
              echo "‚úÖ Successfully deleted version ID: $vid"
            fi
          done
